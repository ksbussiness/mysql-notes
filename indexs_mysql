

INDEXING IN MY SQL:
============================= >

..> By creating indexes, MySQL can quickly locate and retrieve relevant data, reducing the need for full table scans and minimizing response times.

..> The index is a data structure that provides a quick lookup mechanism for faster data retrieval.

..> 

NEED FOR THE INDEXING :
----------------------------- >


Efficient Data Retrieval: Indexing allows the database engine to quickly locate and retrieve data, significantly speeding up query execution.

Improved Query Performance: Indexed columns enhance the performance of SELECT, JOIN, and WHERE clauses by providing a faster search path.

Ensuring Uniqueness: Unique indexes ensure that the values in specified columns are unique, preventing duplicate entries and maintaining data integrity.

Optimized Sorting and Grouping: Indexes improve the efficiency of sorting (ORDER BY) and grouping (GROUP BY) operations by organizing data in a structured manner.

Reduced Full Table Scans: By minimizing the need for full table scans, indexes reduce the load on the database and decrease response times, especially for large tables.


INDEX CREATION:

..> At the time of table creation only:

syntax:

CREATE TABLE p_index (
    column1 INT PRIMARY KEY,
    column2 INT NOT NULL,
    column3 INT NOT NULL,
    column4 VARCHAR(20),
    INDEX (column2, column3)
);

ex:

create table stu(
id INT PRIMARY KEY AUTO_INCREMENT,
name VARCHAR(200),
address VARCHAR(20),
age int,
roll_num int,
index (name,age)
);

..> creation of the index for an existing table:
------------------------------------ >------------------------------------ >
syntax:

CREATE INDEX index_name
ON table_name (column_names);

ex:
create index myindex on demosai(name);


.> TO Check index details and what for the query :
------------------------------------------------------------------------->
EXPLAIN SELECT * FROM products WHERE category = 'Electronics';


.> To show index keys :
------------------------------------------------------------------------ >
.>show index from products;

 show index from <table_name>;

.>for detail information about the indexs we use this :

SELECT * 
FROM INFORMATION_SCHEMA.STATISTICS 
WHERE TABLE_SCHEMA = 'database_name' AND TABLE_NAME = 'table_name';

------------------------------------------------------------------------------>


...> to delet the index of a table
.> DROP index <index_name> on <table_name>;





What Happens Internally When You Create an Index?
Letâ€™s go step by step:

1. New Data Structure Is Created
The database creates a new internal data structure (usually a B-tree or B+ tree).

This structure stores the indexed field's value and a pointer to the original document (like its ID).

2. Existing Documents Are Scanned
The database goes through all your existing documents in the collection.

It picks the value of the field you want to index (e.g., username) and adds it to the index structure with a link to the document.

3. Sorted Order
The values in the index are automatically sorted.

This sorting helps the database quickly jump to results during a query, instead of checking every document one by one.

4. Stored on Disk (and RAM)
The index is stored on disk, just like your documents.

When a query runs, the index can be cached in RAM to make things even faster.

5. New Documents Update the Index
Whenever a new document is added, or an indexed field is updated, the index also gets updated automatically.



Primary Key Special Case
In InnoDB (default engine), if you create a primary key, it's a clustered index.

That means the table rows are stored in the order of the primary key, not separately like in MongoDB.

5. Secondary Indexes
Other indexes (non-primary) are called secondary indexes.

They point to the primary key, and then the primary key points to the full row.

6. Insert/Update Will Update Index
Any time you insert or update a row, MySQL also updates the index automatically.


primary index in mysql:
==============================>

In MySQL, especially with the InnoDB storage engine (which is the default), the primary key is treated as the default index â€” and it's very special.

Let me explain it clearly in simple words:

âœ… What is a Primary Key?
A primary key is a unique identifier for each row in a table.

You must not have duplicate or NULL values in this column.

Example: id, email, roll_number, etc.

âœ… Is the Primary Key Also an Index?
YES â€” when you create a primary key, MySQL automatically creates a special index on that column.

âœ… Why Is It Special?
Because in InnoDB, the primary key is a:

Clustered Index

This means:

The actual row data is stored along with the index, sorted by the primary key.

There is no separate storage for the table rows â€” they are embedded inside the primary index.

note points:
======================= >
Yes, you can delete the primary index, but only by dropping the primary key from the table.

In MySQL, the primary key itself acts as the primary index. So, when you drop the primary key, you're also deleting the primary index.



...> if you want to remove the primary index, you must drop the primary key.

multi key index in mysql:

==================================== >

CREATE INDEX idx_name_email ON users(name, email);



Like MongoDB's multikey index, but for flat data.

Useful for queries that filter or sort by both columns together.

ðŸ”” Important rule in MySQL:


The order matters:
This index helps with WHERE name = 'x' AND email = 'y'
but not with WHERE email = 'y' alone.


FULLTEXT index in the mysql:

FULLTEXT Index (like MongoDB's text index)

CREATE FULLTEXT INDEX idx_bio ON users(bio);
For full-text search: "find me users who mention 'developer'"

Works on CHAR, VARCHAR, TEXT columns.

Use MATCH(...) AGAINST(...) in queries.

HASH Index (Limited Use)
Only supported in MEMORY tables.

InnoDB uses B-tree by default, but you can simulate hash behavior using generated columns + indexes.
