
Primary Key: A column (or set of columns) that uniquely identifies each row in a table.

Foreign Key: A column (or set of columns) that establishes a link between data in two tables. It refers to the Primary Key in another table.

A foreign key is a column or group of columns in one table that refers to the primary key in another table. It ensures referential integrity by restricting invalid data and maintaining consistent relationships.



demo code for the PRIMARY And Foreign KEYS;

CUSTOMERS TABLE:
-------------------------- >
create table customers
(
customer_id int primary key,
name varchar(100),
email varchar(50)

);


insert into customers values(2,'sai','sai@gmail.com'),(1,'sachin','sachin@gmail.com'),(3,'ramya','ramya@gmail.com'),(4, 'Alice Smith', 'alice@example.com'),(5, 'Bob Johnson', 'bob@example.com');

ORDERS TABLE:
------------------------>

create table orders(
order_id int primary key,
amount int,
customer_id int,
foreign key(customer_id) references customers(customer_id)
);


insert into orders values(11,1000,1),(12,200,2),(13,300,3),(14,450,4),(15,500,5);


RELATIONAL DIAGRAM BETWEENN TEH PRIMARY KEY AND FOREIGN KEY:

Table: Customers
+-------------+---------+
| CustomerID  | Name    |
+-------------+---------+
| 1           | Alice   |
| 2           | Bob     |
+-------------+---------+
Primary Key: CustomerID

Table: Orders
+----------+-------------+-------------+
| OrderID  | OrderDate   | CustomerID  |
+----------+-------------+-------------+
| 101      | 2025-04-25  | 1           |
| 102      | 2025-04-26  | 2           |
+----------+-------------+-------------+
Primary Key: OrderID  
Foreign Key: CustomerID â†’ Customers(CustomerID)



 MySQL Foreign Key Requirements :
========================================= >
Both tables must use InnoDB storage engine.

Parent column must be Primary Key or Unique.

Both columns (parent and child) must have:

Same data type and length.

Same character set and collation for string types.

Index must exist on the foreign key column (auto-created if not).


SOME ACTION ON THE FOREIGN KEYS HERE:
=========================================== >

CREATE TABLE orders (
    order_id INT PRIMARY KEY,
    order_date DATE,
    amount DECIMAL(10,2),
    customer_id INT,
    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
    ON DELETE [ACTION]
);


1) ON DELETE CASCADE 
-------------------------------- >
FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
ON DELETE CASCADE

Outcome: Deleting customer with customer_id = 1 will also delete orders 101 and 102.

2) ON DELETE SET NULL
-------------------------------- >

FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
ON DELETE SET NULL

Outcome: Deleting customer with customer_id = 1 will set customer_id to NULL in orders 101 and 102.
Note: The customer_id column in orders must allow NULL values.

3) ON DELETE SET DEFAULT
-------------------------------- >

FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
ON DELETE SET DEFAULT

Outcome: Deleting customer with customer_id = 1 will set customer_id in orders 101 and 102 to the default value specified for that column.
Note: MySQL recognizes SET DEFAULT syntax, but both InnoDB and NDB storage engines reject table definitions containing ON DELETE SET DEFAULT clauses.

4) ON DELETE RESTRICT
-------------------------------- >

FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
ON DELETE RESTRICT

Outcome: Attempting to delete customer with customer_id = 1 will result in an error if orders 101 or 102 exist.

5) ON DELETE NO ACTION
-------------------------------- >

FOREIGN KEY (customer_id) REFERENCES customers(customer_id)
ON DELETE NO ACTION

Outcome: Attempting to delete customer with customer_id = 1 will result in an error if orders 101 or 102 exist.
Note: In MySQL, NO ACTION is functionally equivalent to RESTRICT.

