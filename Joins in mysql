
# creation of the database
-- create database demo;

#using of the data base
-- use demo;

# creation of the customer table

-- create table customers(
-- customer_id int primary key,
-- customer_name varchar(50)
-- );

# checking for teh customer table
-- show tables;

# describe of the customer table 
 -- desc customers;

# creation of the orders table

-- create table orders(
-- order_id int primary key,
-- customer_id int,
-- products varchar(50)
-- );

# checking for the orders table
-- show tables;

#  describing of the orders table 
-- desc orders;

# Inserting  of teh data into the customers table
-- insert into customers values(1,'sachin'),(2,'sai'),(3,'ramya'),(4,'padma'),(5,'kittu');

# seeing the data in the customer table
-- select * from customers;

# inserting data into the orders table
-- insert into orders values(101,1,'Laptop'),(102,2,'phone'),(103,1,'Tablet'),(104,5,'monitor'),(105,3,'Shirt'),(106,5,'watch');

# seeing the data in the order table
 -- select * from orders;


# INNER JOIN BOTH THE TABLES:
-- Returns only the  matching rows from both teh tables based on the condition.

-- select c.customer_id,c.customer_name,o.order_id,o.products
-- from customers c
-- inner join orders o on c.customer_id=o.customer_id;

# LEFT JOIN/LEFT JOIN  FULL OUTER BOTH THE TABLES:
-- returns all the records from yej left table, and matched records from the right
-- Nulls where no match in right table.

-- select c.customer_id,c.customer_name,o.order_id,o.products
-- from customers c
-- left join orders o on c.customer_id=o.customer_id;

# LEFT JOIN WITH THE EXCLUSION ON BOTH TEH TABLES:
-- only gives the data from the left table exclusiviely

-- select c.customer_id, c.customer_name, o.order_id,o.products
-- from customers c
-- left join orders o on o.customer_id=c.customer_id
-- where o.customer_id is NULL;

# COMPLETE CONCEPT ABOUT TEH LEFT JOINS  WORKING :

-- WORKIN OF THE LEFT JOINS:

-- .> Take ALL rows from the LEFT table (customers here).
-- .> Try to match with the RIGHT table (orders here).
-- .> If match is found, show data from both tables.
-- .> If no match, show LEFT table data and NULLs for RIGHT table columns.

-- .> When customer has a matching order → order details shown (RIGHT table data comes).
-- .> When customer has no matching order → NULLs shown for order_id, products (RIGHT table columns).

-- > When you do SELECT c.customer_id, c.customer_name, o.order_id, o.products,
-- you are allowed to select columns from both LEFT and RIGHT tables.

-- Left join doesn't mean you cannot use RIGHT table columns.

-- It only controls how the rows are picked.

-- Selecting columns from right table is completely fine in LEFT JOIN.

# inserting data in to the orders table
-- insert into orders values(107,NULL,'Chips');
-- insert into orders values(108,NULL,'bags');

# RIGHT JOIN /RIGHT OUTER JOIN BOTH TEH TABLES;
-- Returns all records from the right table, and matched records from the left.
-- NULLs where no match in left table.

-- select c.customer_id,c.customer_name,o.order_id,o.products
-- from customers c
-- right join orders o on c.customer_id=o.customer_id;

# RIGHT JOIN WITH THE EXCLUSION ON BOTH TEH TABLES:
-- only gives the data from the right  table exclusiviely

-- select c.customer_id ,c.customer_name,o.order_id,o.products
-- from customers c
-- right join orders o on c.customer_id=o.customer_id
-- where c.customer_id is NULL;




# FULL JOIN /FULL OUTER  JOIN:

-- Not directly supported in MySQL, but can be simulated using UNION.
-- Returns all rows from both tables, with NULLs for unmatched rows.


-- select c.customer_id,c.customer_name,o.order_id,o.products
-- from customers c
-- left join orders o on c.customer_id=o.customer_id
-- union
-- select c.customer_id,c.customer_name,o.order_id,o.products
-- from customers c
-- right join orders o on c.customer_id=o.customer_id;



# FULL JOIN WITH THE EXCLUSION FOR TEH BOTH THE TABLES:


select c.customer_id,c.customer_name,o.order_id,o.products
from customers c
left join orders o on c.customer_id=o.customer_id
where o.customer_id is NULL
 union
 select c.customer_id,c.customer_name,o.order_id,o.products
 from customers c
 right join orders o on c.customer_id=o.customer_id
 where c.customer_id is NULL




# Cross join or Cartesian Join:

-- Combines each row from the first table with every row from the second.


-- SELECT *
-- FROM customers, orders;

-- SELECT *
-- FROM customers
-- CROSS JOIN orders;


-- select c.customer_id,c.customer_name,o.order_id,o.products
--  from customers c
-- cross join orders o;


# CRON JOIN NOTES:

-- In a CROSS JOIN:
-- There is NO ON condition.
-- It does not match rows based on any column.
-- It simply pairs every row from the first table with every row from the second table.


#Why no condition?
# The purpose of a CROSS JOIN is to produce the Cartesian Product.

# If table A has m rows and table B has n rows, the result will have m × n rows.

# Example in your case:
# --------------------------------- >
# customers table: 4 rows
# orders table: 4 rows
# Result: 4 × 4 = 16 rows total.


