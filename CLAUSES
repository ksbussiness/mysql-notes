ALL MYSQL CLAUSES :

CLAUSES:

..> MySQL clauses are fundamental components of SQL queries.

..> They define the structure and constraints of SQL statements, e


WE HAVE DIFFERENT TYPES OF THE MYSQL CLAUSES;

1) SELECT Clause: Used to retrieve specific data from one or more tables.

Syntax: SELECT column1, column2 FROM table_name;

2) FROM Clause: Specifies the table from which to retrieve the data.

Syntax: SELECT column1, column2 FROM table_name;

3) WHERE Clause: Filters records based on specific conditions.

Syntax: SELECT column1, column2 FROM table_name WHERE condition;


4) GROUP BY Clause: Groups rows with the same values in specified columns :

Syntax: SELECT column, aggregate_function(column) FROM table_name GROUP BY column;



EX:
OrderID	 Product		Category	Quantity	Price
1	Laptop	         Electronics		1		1200
2	Keyboard	 Electronics	        2	         75
3	Book	         Books			3		15
4	Laptop	         Electronics		 1              1150
5	Mouse	         Electronics		1		25
6	Book	         Books			2		18
7	T-shirt	         Apparel		5		20
8	Jeans	         Apparel		2		60


EX : When you use the GROUP BY clause, you're essentially telling MySQL to gather all the rows that have the same value in one or more specified columns and treat them as a single group.

SELECT Category
FROM Sales
GROUP BY Category;


.> MySQL will go through the Sales table and group the rows based on the values in the Category column. 
The result will be a single row for each unique category:


Category :

Electronics
Books
Apparel



GROUP BY with Aggregate Functions ;
------------------------------------------- >

.> Aggregate functions perform calculations on these groups of rows. Common aggregate functions include COUNT(), SUM(), AVG(), MIN(), and MAX().

.> To find the number of products in each category, you would use the COUNT() function:

SELECT Category, COUNT(ProductID)
FROM Sales
GROUP BY Category;

This query first groups the rows by Category, and then for each group, it counts the number of rows (which represents the number of products in that category).

Result:
Category	COUNT(ProductID)
Electronics	3
Books	2
Apparel	2


NOTE: group BY CAN BE USED WITH AND WITH OUT AGGREGATE FUNCTIONS:

you can use GROUP BY without any aggregate functions. 

..> group by will uniquely scan teh table for aa particular column then it will be identify the unique fields and , group these fields together accordingly.


5) HAVING Clause: Filters groups of data created by the GROUP BY clause :

Syntax: SELECT column, aggregate_function(column) FROM table_name GROUP BY column HAVING condition; 

note : The HAVING clause is exclusively used in conjunction with the GROUP BY clause. You cannot use HAVING in a SQL query without also using GROUP BY. Its purpose is to filter the results after the rows have been grouped.

..> 

The flow happens here like :
----------------------------------- >
where
|
>
group by
|
>
aggregate functions()
|
>
having 

Think of it this way:
---------------------------------- >

WHERE clause: Filters individual rows based on specified conditions.
GROUP BY clause: Groups the remaining rows into sets based on the values in one or more columns.
Aggregate functions (like COUNT(), SUM(), AVG(), etc.): Operate on each of these groups, producing a single summary value for each group.
HAVING clause: Filters these resulting groups based on conditions applied to the aggregated values.



When you use the HAVING clause, SQL will:
Execute the FROM and WHERE clauses (if present) to get the initial set of rows.
Execute the GROUP BY clause to group these rows based on the specified columns.
Calculate any aggregate functions specified in the SELECT list for each group.
Apply the conditions in the HAVING clause to each of these resulting groups. Only the groups that satisfy the HAVING conditions will be included in the final result set.


Definition of the HAVING Clause:
The HAVING clause in SQL specifies filter conditions for groups created by the GROUP BY clause. It allows you to filter based on the results of aggregate functions or on the grouped columns themselves after the grouping operation has been performed.



6) ORDER BY Clause: Sorts query results in ascending or descending order :

Syntax: SELECT column1, column2 FROM table_name ORDER BY column1 ASC|DESC;

ORDER BY COLUMN1 ,COLUMN2, ...



7) LIMIT Clause: Restricts the number of rows returned by a query.

Syntax: SELECT column1, column2 FROM table_name LIMIT number;

NOTE: LIMIT {0} ..> NO RESULTS

      LIMIT {>EXCEEDS THE RESULT SETS THE} ..> RESSULTS


The complete flow of all the query's clauses:
------------------------------------------------------ >

SELECT column1, column2, aggregate_function(column3)
FROM table_name
WHERE condition(s)
GROUP BY column_for_grouping1, column_for_grouping2, ...
HAVING group_condition(s)
ORDER BY column_for_sorting1 [ASC|DESC], column_for_sorting2 [ASC|DESC], ...
LIMIT [offset,] count;
